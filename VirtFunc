#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;


class Person{
    
  private:
  string name;
  int age;
  
  public: 
  Person(string n, int a):name(n),age(a){};
  Person(string n):Person(n,0){};
  Person(int a):Person("Blank", a){};
  Person():Person("Blank", 0){};
  
  void setName(string n){name = n;}
  void setAge(int a){age = a;}
  
  string getName()const {return name;}
  int getAge()const {return age;} 
  
  virtual void getdata()
  {
      string temp_name;
      int temp_age;
      
      cout << "Name? " ;
      cin >> temp_name;
      
      cout << "Age? ";
      cin >> temp_age;
      
      setName(temp_name);
      setAge(temp_age);
  }
  
  virtual void putdata()
  {
      cout << getName() << endl
           << getAge() << endl;
  }
};


class Professor: public Person {
    
  private:
  int publications;
  int cur_id = 1;
  
  public:  
  
  int getCur_ids() {return cur_id;}
  virtual void incId(){cur_id++;}
  
  Professor(int p, int c):publications(p){;}
  Professor():Professor(0,0){};
  
  void setPublications(int pubs) {publications = pubs;}
  
  int getPublications()const {return publications;}
 
  
  virtual void getdata()
  {
      string temp_name;
      int temp_age;
      int temp_publications;
      
      cin >> temp_name;
      
      cin >> temp_age;
      
      cin >> temp_publications;
      
    Person :: setName(temp_name);
    Person :: setAge(temp_age);
    setPublications(temp_publications);
         
  }
  void putdata()
  {
      cout << getName() << " " <<getAge() << " "
           << getPublications() << " " <<  getCur_ids()<< endl;
           incId();
  }
};

class Student: public Person
{
  private:
  static const int capacity = 6 ;
  int marks [capacity];
  int cur_id = 1;
  
  
  public:  
   

  int getCur_ids(){return cur_id;}
  virtual void incId(){cur_id++;}
    
  
  Student ()
  {
      for(int index = 0; index < 6; index++)
      {
          marks[index] = 0;
      }
      
  }
      
    int getSZ(){return capacity;}
  
   
    virtual void getdata()
  {
      string temp_name;
      int temp_age;
      
      cin >> temp_name;
      
      cin >> temp_age;
      
      for(int index = 0; index < getSZ(); index++)
      {
        cin >> marks[index];
      }
      
      
      
    Person :: setName(temp_name);
    Person :: setAge(temp_age);
  }
   
  
  void putdata()
  {        
      int sum = 0;
       
      for(int index = 0; index < getSZ(); index++){
          sum += marks[index];
      }      
      
      cout << Person :: getName() << " " << Person :: getAge()
           << " " << sum << " " << getCur_ids() << endl;
           incId();
  }
    
};

//Hacker rank provided code below this line 

int main(){

    int n, val;
    cin>>n; //The number of objects that is going to be created.
    Person *per[n];

    for(int i = 0;i < n;i++){

        cin>>val;
        if(val == 1){
            // If val is 1 current object is of type Professor
            per[i] = new Professor;

        }
        else per[i] = new Student; // Else the current object is of type Student

        per[i]->getdata(); // Get the data from the user.

    }

    for(int i=0;i<n;i++)
        per[i]->putdata(); // Print the required output for each object.

    return 0;

}
